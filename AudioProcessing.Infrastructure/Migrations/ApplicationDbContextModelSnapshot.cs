// <auto-generated />
using System;
using AudioProcessing.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AudioProcessing.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("AudioProcessing")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AudioProcessing.Domain.Chats.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ChatTitel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Chats", "AudioProcessing");
                });

            modelBuilder.Entity("AudioProcessing.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "AudioProcessing");
                });

            modelBuilder.Entity("AudioProcessing.Domain.Chats.Chat", b =>
                {
                    b.OwnsMany("AudioProcessing.Domain.Chats.ChatResponce", "ChatResponces", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("AudioId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ChatId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Promt")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("ChatId");

                            b1.ToTable("ChatResponces", "AudioProcessing");

                            b1.WithOwner()
                                .HasForeignKey("ChatId");

                            b1.OwnsOne("AudioProcessing.Domain.Chats.PromtType", "PromtType", b2 =>
                                {
                                    b2.Property<Guid>("ChatResponceId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("PromtType");

                                    b2.HasKey("ChatResponceId");

                                    b2.ToTable("ChatResponces", "AudioProcessing");

                                    b2.WithOwner()
                                        .HasForeignKey("ChatResponceId");
                                });

                            b1.Navigation("PromtType")
                                .IsRequired();
                        });

                    b.Navigation("ChatResponces");
                });
#pragma warning restore 612, 618
        }
    }
}
